services:
  # Main RAG Agent API
  - type: web
    name: rag-agent-api
    runtime: python
    buildCommand: "pip install -r requirements.txt && python -c 'import nltk; nltk.download(\"punkt\")'"
    startCommand: "uvicorn app:app --host 0.0.0.0 --port $PORT"
    envVars:
      - key: LLM_PROVIDER
        value: openai
      - key: LLM_MODEL
        value: gpt-4
      - key: LLM_API_KEY
        sync: false  # Set this in Render dashboard
      - key: LLM_BASE_URL
        value: https://api.openai.com/v1
      - key: OPENAI_API_KEY
        sync: false  # Set this in Render dashboard
      - key: ANTHROPIC_API_KEY
        sync: false  # Set this in Render dashboard if needed
      - key: COHERE_API_KEY
        sync: false  # For reranking
      - key: GROQ_API_KEY
        sync: false  # Optional
      - key: DATABASE_URL
        sync: false  # Set this in Render dashboard
    autoDeploy: false  # Set to true if you want auto-deploy from GitHub

  # Vectorization Service
  - type: web
    name: rag-vectorization-api
    runtime: python
    buildCommand: |
      pip install -r requirements.txt && 
      python -c 'import nltk; nltk.download("punkt")' &&
      if [ -f "sql/unified_schema.sql" ]; then
        psql $DATABASE_URL -f sql/unified_schema.sql || true
      fi
    startCommand: "uvicorn vectorization_api:app --host 0.0.0.0 --port $PORT"
    envVars:
      - key: OPENAI_API_KEY
        sync: false  # For embeddings
      - key: DATABASE_URL
        sync: false  # Same database as main agent
      - key: ANTHROPIC_API_KEY
        sync: false  # Optional
      - key: COHERE_API_KEY
        sync: false  # For reranking
    autoDeploy: false

# Database (if you want to use Render's PostgreSQL)
databases:
  - name: rag-database
    databaseName: rag_production
    user: rag_user
    plan: starter  # or 'standard' for production